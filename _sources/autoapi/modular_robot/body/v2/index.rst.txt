:py:mod:`v2`
===============================

.. py:module:: modular_robot.body.v2

.. autoapi-nested-parse::

   Explicit modules of V2 Robot.



Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   modular_robot.body.v2.ActiveHingeV2
   modular_robot.body.v2.BodyV2
   modular_robot.body.v2.BrickV2
   modular_robot.body.v2.CoreV2




.. py:class:: ActiveHingeV2(rotation: float | modular_robot.body._right_angles.RightAngles)


   Bases: :py:obj:`modular_robot.body.base.ActiveHinge`

   .. autoapi-inheritance-diagram:: modular_robot.body.v2.ActiveHingeV2
      :parts: 1

   An active hinge module for a modular robot.

   This is a rotary joint.


.. py:class:: BodyV2(attachment_positions: list[int] = [0] * 4)


   Bases: :py:obj:`modular_robot.body.base._body.Body`

   .. autoapi-inheritance-diagram:: modular_robot.body.v2.BodyV2
      :parts: 1

   Body of a V1 modular robot.

   .. py:method:: to_grid() -> tuple[list[list[list[modular_robot.body._module.Module | None]]], tuple[int, int, int]]

      Convert the tree structure to a grid.

      The distance between all modules is assumed to be one grid cell.
      All module angles must be multiples of 90 degrees.

      The grid is indexed depth, width, height, or x, y, z, from the perspective of the core.

      :returns: The created grid with cells set to either a Module or None and a tuple representing the position of the core.
      :raises NotImplementedError: In case a module is encountered that is not supported.

      # noqa: DAR402 NotImplementedError



.. py:class:: BrickV2(rotation: float | modular_robot.body._right_angles.RightAngles)


   Bases: :py:obj:`modular_robot.body.base.Brick`

   .. autoapi-inheritance-diagram:: modular_robot.body.v2.BrickV2
      :parts: 1

   A brick module for a modular robot.


.. py:class:: CoreV2(rotation: float | modular_robot.body._right_angles.RightAngles, attachment_positions: list[int], num_batteries: int = 1)


   Bases: :py:obj:`modular_robot.body.base.Core`

   .. autoapi-inheritance-diagram:: modular_robot.body.v2.CoreV2
      :parts: 1

   The core module of a modular robot.

   .. py:property:: horizontal_offset
      :type: float

      Get the horizontal offset for attachment positions (in m).

      :return: The value.


   .. py:property:: vertical_offset
      :type: float

      Get the vertical offset for attachment positions (in m).

      :return: The value.


   .. py:property:: attachment_positions
      :type: list[int]

      Get the populated attachment positions for each core side.

      :return: The value.



