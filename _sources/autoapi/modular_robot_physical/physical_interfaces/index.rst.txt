:py:mod:`physical_interfaces`
====================================================

.. py:module:: modular_robot_physical.physical_interfaces

.. autoapi-nested-parse::

   Interfaces to the hardware.



Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   v1/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   modular_robot_physical.physical_interfaces.PhysicalControlInterface
   modular_robot_physical.physical_interfaces.PhysicalInterface
   modular_robot_physical.physical_interfaces.PhysicalSensorState




.. py:class:: PhysicalControlInterface(debug: bool, dry: bool, hinge_mapping: dict[modular_robot_physical._uuid_key.UUIDKey[revolve2.modular_robot.body.base.ActiveHinge], int], inverse_pin: dict[int, bool])


   Bases: :py:obj:`revolve2.modular_robot.ModularRobotControlInterface`

   .. autoapi-inheritance-diagram:: modular_robot_physical.physical_interfaces.PhysicalControlInterface
      :parts: 1

   A base interface for physical robot control.

   .. py:method:: set_active_hinge_target(active_hinge: revolve2.modular_robot.body.base.ActiveHinge, target: float) -> None

      Set the position target for an active hinge.

      Target is clamped within the active hinges range.

      :param active_hinge: The active hinge to set the target for.
      :param target: The target to set.



.. py:class:: PhysicalInterface


   Bases: :py:obj:`abc.ABC`

   .. autoapi-inheritance-diagram:: modular_robot_physical.physical_interfaces.PhysicalInterface
      :parts: 1

   Abstract implementation for interfacing with hardware.

   .. py:property:: control_interface
      :type: modular_robot_physical.physical_interfaces._physical_control_interface.PhysicalControlInterface
      :abstractmethod:

      Get the control interface.

      :returns: The control interface.


   .. py:method:: read_sensor_state() -> modular_robot_physical.physical_interfaces._physical_sensor_state.PhysicalSensorState
      :abstractmethod:

      Read the current sensor state.

      :returns: The sensor state.


   .. py:method:: shutdown() -> None
      :abstractmethod:

      Shutdown the interface.



.. py:class:: PhysicalSensorState


   Bases: :py:obj:`revolve2.modular_robot.sensor_state.ModularRobotSensorState`

   .. autoapi-inheritance-diagram:: modular_robot_physical.physical_interfaces.PhysicalSensorState
      :parts: 1

   A Class for using physical sensors.

   .. py:method:: get_active_hinge_sensor_state(sensor: revolve2.modular_robot.body.base.ActiveHingeSensor) -> revolve2.modular_robot.sensor_state.ActiveHingeSensorState
      :abstractmethod:

      Get sensor states for Hinges.

      :param sensor: The sensor to query.
      :return: The Sensor State.



